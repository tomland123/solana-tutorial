{"ast":null,"code":"var _jsxFileName = \"/Users/mr.mac/SolanaHackathon/solana/src/Pages/02_SendTransactions.js\",\n    _s = $RefreshSig$();\n\nimport { Explanation, ExplanationText, Footer, Section, Title } from \"../Components/Explanation\";\nimport { BrowserRouter as Router, useHistory, Link } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport { Connection, Transaction, SystemProgram, PublicKey, Account, sendAndConfirmTransaction, sendAndConfirmRawTransaction } from \"@solana/web3.js\";\nimport fetchAllAcountInfo from \"../utils/fetchAllAccountInfo\";\nimport AccountCard from \"../Components/AccountCard\";\nimport Github from \"../Components/Github\";\nimport { Row, Col, Container } from \"react-grid-system\";\nimport Spinner from \"../Components/Spinner\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst SendTransaction = ({\n  accountList,\n  connection\n}) => {\n  _s();\n\n  const [transaction, setTransactions] = useState(false);\n  const [value, setValue] = useState(\"\");\n  const [balanceLoading, setBalanceLoading] = useState(true);\n  const [loading, setLoading] = useState(false);\n\n  const sendTransactions = async e => {\n    var _transaction$;\n\n    setLoading(true);\n    const account = new Account(transaction === null || transaction === void 0 ? void 0 : transaction[0].secretKey);\n    const secondAccount = new PublicKey(transaction[1].publicKey.toString());\n    const bloop = new Transaction().add(SystemProgram.transfer({\n      fromPubkey: account.publicKey,\n      toPubkey: secondAccount,\n      lamports: value\n    }));\n    await sendAndConfirmTransaction(connection, bloop, [account], {\n      skipPreflight: true\n    });\n    const accountDetailOne = await fetchAllAcountInfo(account.publicKey, connection);\n    let accountDetailTwo = await fetchAllAcountInfo(secondAccount, connection);\n    setTransactions([{ ...accountDetailOne,\n      secretKey: transaction === null || transaction === void 0 ? void 0 : (_transaction$ = transaction[0]) === null || _transaction$ === void 0 ? void 0 : _transaction$.secretKey\n    }, accountDetailTwo]);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    const abortController = new AbortController();\n\n    const getNewAccount = async () => {\n      const secondAccount = await new PublicKey(\"DoFxSedewimW1j8wz1LDhNUsqWs97aytqXkhFj8WBz8H\");\n\n      if (connection) {\n        var _accountList$, _accountList$2;\n\n        setLoading(true);\n        setBalanceLoading(true);\n        const mainAccount = new PublicKey(accountList === null || accountList === void 0 ? void 0 : (_accountList$ = accountList[0]) === null || _accountList$ === void 0 ? void 0 : _accountList$.publicKey.toString());\n        const accountDetailOne = await fetchAllAcountInfo(mainAccount, connection);\n        let accountDetailTwo = await fetchAllAcountInfo(secondAccount, connection);\n        const airDrop = await connection.requestAirdrop(mainAccount, 1000000000);\n        setTransactions([{ ...accountDetailOne,\n          secretKey: accountList === null || accountList === void 0 ? void 0 : (_accountList$2 = accountList[0]) === null || _accountList$2 === void 0 ? void 0 : _accountList$2.secretKey\n        }, accountDetailTwo]);\n\n        const tryAgain = async (number = 10) => {\n          const mainAccountUpdated = await fetchAllAcountInfo(mainAccount, connection);\n\n          if (abortController.signal.aborted) {\n            return;\n          }\n\n          if (mainAccountUpdated.balance > (accountDetailOne === null || accountDetailOne === void 0 ? void 0 : accountDetailOne.balance)) {\n            {\n              var _accountList$3;\n\n              setTransactions([{ ...mainAccountUpdated,\n                secretKey: accountList === null || accountList === void 0 ? void 0 : (_accountList$3 = accountList[0]) === null || _accountList$3 === void 0 ? void 0 : _accountList$3.secretKey\n              }, accountDetailTwo]);\n              setBalanceLoading(false);\n              return;\n            }\n          } else {\n            if (balanceLoading) {\n              await new Promise(resolve => setTimeout(() => resolve(), 2000));\n              await tryAgain(airDrop, number - 1);\n            }\n          }\n        };\n\n        tryAgain();\n        setLoading(false);\n      }\n    };\n\n    getNewAccount();\n    return () => {\n      abortController.abort();\n    };\n  }, [connection]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Spinner, {\n      loading: loading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      className: \"wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(Explanation, {\n        children: [/*#__PURE__*/_jsxDEV(Title, {\n          children: \"Let's try sending a transaction!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ExplanationText, {\n          children: \"Some money has been airdropped into one of the accounts you created previously! Airdropping means that we have deposited some Solana that you can play with on your account. This can take a few seconds.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ExplanationText, {\n          children: \"To send a transaction do this, you need the reciever wallet, and the send wallet. This page has two generated accounts. The first account, is ... the second account is a dummy account created to track public transactions from users who go through this tutorial. If you want to check the transaction, you can see a list of all transactions here:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          xs: 5,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              textAlign: \"center\"\n            },\n            children: /*#__PURE__*/_jsxDEV(Title, {\n              children: \"Sender Account\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(AccountCard, {\n            account: transaction[0]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          xs: 2,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: \"flex\",\n              height: \"100%\"\n            },\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              style: {\n                width: \"50%\",\n                margin: \"auto\"\n              },\n              src: \"Arrow_east.svg\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          xs: 5,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              textAlign: \"center\"\n            },\n            children: /*#__PURE__*/_jsxDEV(Title, {\n              children: \"Receiving Account\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(AccountCard, {\n            account: transaction[1],\n            loadingBalance: loading\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Section, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          width: \"100%\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: e => {\n            setValue(e.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: sendTransactions,\n          children: \"Send coins to new account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Section, {\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: `/success`,\n          className: !accountList.length ? \"disabled\" : null,\n          children: \"Finish\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {\n        children: /*#__PURE__*/_jsxDEV(Github, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(SendTransaction, \"VYP6wD7x9DzkM1rU4QqKPDHYSeU=\");\n\n_c = SendTransaction;\nexport default SendTransaction;\n\nvar _c;\n\n$RefreshReg$(_c, \"SendTransaction\");","map":{"version":3,"sources":["/Users/mr.mac/SolanaHackathon/solana/src/Pages/02_SendTransactions.js"],"names":["Explanation","ExplanationText","Footer","Section","Title","BrowserRouter","Router","useHistory","Link","useEffect","useState","Connection","Transaction","SystemProgram","PublicKey","Account","sendAndConfirmTransaction","sendAndConfirmRawTransaction","fetchAllAcountInfo","AccountCard","Github","Row","Col","Container","Spinner","SendTransaction","accountList","connection","transaction","setTransactions","value","setValue","balanceLoading","setBalanceLoading","loading","setLoading","sendTransactions","e","account","secretKey","secondAccount","publicKey","toString","bloop","add","transfer","fromPubkey","toPubkey","lamports","skipPreflight","accountDetailOne","accountDetailTwo","abortController","AbortController","getNewAccount","mainAccount","airDrop","requestAirdrop","tryAgain","number","mainAccountUpdated","signal","aborted","balance","Promise","resolve","setTimeout","abort","textAlign","display","height","width","margin","target","length"],"mappings":"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","sourcesContent":["import {\n  Explanation,\n  ExplanationText,\n  Footer,\n  Section,\n  Title,\n} from \"../Components/Explanation\";\nimport { BrowserRouter as Router, useHistory, Link } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport {\n  Connection,\n  Transaction,\n  SystemProgram,\n  PublicKey,\n  Account,\n  sendAndConfirmTransaction,\n  sendAndConfirmRawTransaction,\n} from \"@solana/web3.js\";\n\nimport fetchAllAcountInfo from \"../utils/fetchAllAccountInfo\";\nimport AccountCard from \"../Components/AccountCard\";\nimport Github from \"../Components/Github\";\nimport { Row, Col, Container } from \"react-grid-system\";\nimport Spinner from \"../Components/Spinner\";\n\nconst SendTransaction = ({ accountList, connection }) => {\n  const [transaction, setTransactions] = useState(false);\n  const [value, setValue] = useState(\"\");\n  const [balanceLoading, setBalanceLoading] = useState(true);\n  const [loading, setLoading] = useState(false);\n\n  const sendTransactions = async (e) => {\n    setLoading(true);\n    const account = new Account(transaction?.[0].secretKey);\n\n    const secondAccount = new PublicKey(transaction[1].publicKey.toString());\n\n    const bloop = new Transaction().add(\n      SystemProgram.transfer({\n        fromPubkey: account.publicKey,\n        toPubkey: secondAccount,\n        lamports: value,\n      }),\n    );\n\n    await sendAndConfirmTransaction(connection, bloop, [account], {\n      skipPreflight: true,\n    });\n\n    const accountDetailOne = await fetchAllAcountInfo(\n      account.publicKey,\n      connection,\n    );\n\n    let accountDetailTwo = await fetchAllAcountInfo(secondAccount, connection);\n\n    setTransactions([\n      { ...accountDetailOne, secretKey: transaction?.[0]?.secretKey },\n      accountDetailTwo,\n    ]);\n\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    const abortController = new AbortController();\n\n    const getNewAccount = async () => {\n      const secondAccount = await new PublicKey(\n        \"DoFxSedewimW1j8wz1LDhNUsqWs97aytqXkhFj8WBz8H\",\n      );\n\n      if (connection) {\n        setLoading(true);\n        setBalanceLoading(true);\n\n        const mainAccount = new PublicKey(\n          accountList?.[0]?.publicKey.toString(),\n        );\n\n        const accountDetailOne = await fetchAllAcountInfo(\n          mainAccount,\n          connection,\n        );\n\n        let accountDetailTwo = await fetchAllAcountInfo(\n          secondAccount,\n          connection,\n        );\n\n        const airDrop = await connection.requestAirdrop(\n          mainAccount,\n          1000000000,\n        );\n\n        setTransactions([\n          { ...accountDetailOne, secretKey: accountList?.[0]?.secretKey },\n          accountDetailTwo,\n        ]);\n\n        const tryAgain = async (number = 10) => {\n          const mainAccountUpdated = await fetchAllAcountInfo(\n            mainAccount,\n            connection,\n          );\n          if (abortController.signal.aborted) {\n            return;\n          }\n\n          if (mainAccountUpdated.balance > accountDetailOne?.balance) {\n            {\n              setTransactions([\n                {\n                  ...mainAccountUpdated,\n                  secretKey: accountList?.[0]?.secretKey,\n                },\n                accountDetailTwo,\n              ]);\n\n              setBalanceLoading(false);\n\n              return;\n            }\n          } else {\n            if (balanceLoading) {\n              await new Promise((resolve) => setTimeout(() => resolve(), 2000));\n\n              await tryAgain(airDrop, number - 1);\n            }\n          }\n        };\n\n        tryAgain();\n\n        setLoading(false);\n      }\n    };\n\n    getNewAccount();\n    return () => {\n      abortController.abort();\n    };\n  }, [connection]);\n\n  return (\n    <>\n      <Spinner loading={loading} />\n      <Container className=\"wrapper\">\n        <Explanation>\n          <Title>Let's try sending a transaction!</Title>\n          <ExplanationText>\n            Some money has been airdropped into one of the accounts you created\n            previously! Airdropping means that we have deposited some Solana\n            that you can play with on your account. This can take a few seconds.\n          </ExplanationText>\n          <ExplanationText>\n            To send a transaction do this, you need the reciever wallet, and the\n            send wallet. This page has two generated accounts. The first\n            account, is ... the second account is a dummy account created to\n            track public transactions from users who go through this tutorial.\n            If you want to check the transaction, you can see a list of all\n            transactions here:\n          </ExplanationText>\n        </Explanation>\n\n        <Row>\n          <Col xs={5}>\n            <div\n              style={{\n                textAlign: \"center\",\n              }}\n            >\n              <Title>Sender Account</Title>\n            </div>\n            <AccountCard account={transaction[0]} />\n          </Col>\n          <Col xs={2}>\n            <div\n              style={{\n                display: \"flex\",\n                height: \"100%\",\n              }}\n            >\n              <img\n                style={{\n                  width: \"50%\",\n                  margin: \"auto\",\n                }}\n                src=\"Arrow_east.svg\"\n              />\n            </div>\n          </Col>\n          <Col xs={5}>\n            <div\n              style={{\n                textAlign: \"center\",\n              }}\n            >\n              <Title>Receiving Account</Title>\n            </div>\n            <AccountCard account={transaction[1]} loadingBalance={loading} />\n          </Col>\n        </Row>\n\n        <Section />\n        <div\n          style={{\n            display: \"flex\",\n            width: \"100%\",\n          }}\n        >\n          <input\n            onChange={(e) => {\n              setValue(e.target.value);\n            }}\n          ></input>\n          <button onClick={sendTransactions}>Send coins to new account</button>\n        </div>\n\n        <Section>\n          <Link\n            to={`/success`}\n            className={!accountList.length ? \"disabled\" : null}\n          >\n            Finish\n          </Link>\n        </Section>\n        <Footer>\n          <Github />\n        </Footer>\n      </Container>\n    </>\n  );\n};\n\nexport default SendTransaction;\n"]},"metadata":{},"sourceType":"module"}