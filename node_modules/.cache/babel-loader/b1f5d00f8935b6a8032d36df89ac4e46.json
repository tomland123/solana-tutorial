{"ast":null,"code":"var _jsxFileName = \"/Users/mr.mac/SolanaHackathon/solana/src/Pages/02_SendTransactions.js\",\n    _s = $RefreshSig$();\n\nimport { Explanation, ExplanationText, Title } from \"../Components/Explanation\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SendTransaction = ({\n  accountList,\n  connection\n}) => {\n  _s();\n\n  var _accountList$2;\n\n  const [transaction, setTransactions] = useState(false);\n  const [goToNextPage, setNextPage] = useState(false);\n  useEffect(() => {\n    const getNewAccount = async () => {\n      const account = await new PublicKey(\"DoFxSedewimW1j8wz1LDhNUsqWs97aytqXkhFj8WBz8H\");\n      const newAccount = await connection.getBalance(account);\n\n      if (accountList === null || accountList === void 0 ? void 0 : accountList[0]) {\n        var _accountList$;\n\n        const newTransaction = await connection.getBalance(accountList === null || accountList === void 0 ? void 0 : (_accountList$ = accountList[0]) === null || _accountList$ === void 0 ? void 0 : _accountList$.publicKey);\n      }\n\n      console.log(newAccount, newTransaction, \"connection stuff\");\n      setTransactions(account);\n    };\n\n    getNewAccount();\n  }, []);\n\n  const transactAndAllowNextPage = () => {\n    console.log(transaction);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Explanation, {\n      children: [/*#__PURE__*/_jsxDEV(Title, {\n        children: \"Let's try sending a transaction now!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ExplanationText, {\n        children: \"Being able to send and receive a transaction is really important. To do this, you need the reciever wallet, and the send wallet. This page has two generated accounts. If you want to check the transaction, you can see a list of all transactions here:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"AS you can see there is a transaction fee associated with your transaction.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: accountList === null || accountList === void 0 ? void 0 : (_accountList$2 = accountList[0]) === null || _accountList$2 === void 0 ? void 0 : _accountList$2.publicKey.toString()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: `/learn-rent`,\n      className: !accountList.length ? \"disabled\" : null,\n      children: \"Go Next\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SendTransaction, \"kJzgWk8xBqQlFynKEvGnWk6+JJw=\");\n\n_c = SendTransaction;\nexport default SendTransaction;\n\nvar _c;\n\n$RefreshReg$(_c, \"SendTransaction\");","map":{"version":3,"sources":["/Users/mr.mac/SolanaHackathon/solana/src/Pages/02_SendTransactions.js"],"names":["Explanation","ExplanationText","Title","BrowserRouter","Router","Switch","Route","Link","useEffect","useState","PublicKey","SendTransaction","accountList","connection","transaction","setTransactions","goToNextPage","setNextPage","getNewAccount","account","newAccount","getBalance","newTransaction","publicKey","console","log","transactAndAllowNextPage","toString","length"],"mappings":";;;AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,KAAvC,QAAoD,2BAApD;AACA,SAASC,aAAa,IAAIC,MAA1B,EAAkCC,MAAlC,EAA0CC,KAA1C,EAAiDC,IAAjD,QAA6D,kBAA7D;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,SAAT,QAA0B,iBAA1B;;;AAEA,MAAMC,eAAe,GAAG,CAAC;AAAEC,EAAAA,WAAF;AAAeC,EAAAA;AAAf,CAAD,KAAiC;AAAA;;AAAA;;AACvD,QAAM,CAACC,WAAD,EAAcC,eAAd,IAAiCN,QAAQ,CAAC,KAAD,CAA/C;AACA,QAAM,CAACO,YAAD,EAAeC,WAAf,IAA8BR,QAAQ,CAAC,KAAD,CAA5C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMU,aAAa,GAAG,YAAY;AAChC,YAAMC,OAAO,GAAG,MAAM,IAAIT,SAAJ,CACpB,8CADoB,CAAtB;AAIA,YAAMU,UAAU,GAAG,MAAMP,UAAU,CAACQ,UAAX,CAAsBF,OAAtB,CAAzB;;AAEA,UAAIP,WAAJ,aAAIA,WAAJ,uBAAIA,WAAW,CAAG,CAAH,CAAf,EAAsB;AAAA;;AACpB,cAAMU,cAAc,GAAG,MAAMT,UAAU,CAACQ,UAAX,CAC3BT,WAD2B,aAC3BA,WAD2B,wCAC3BA,WAAW,CAAG,CAAH,CADgB,kDAC3B,cAAkBW,SADS,CAA7B;AAGD;;AAEDC,MAAAA,OAAO,CAACC,GAAR,CAAYL,UAAZ,EAAwBE,cAAxB,EAAwC,kBAAxC;AAEAP,MAAAA,eAAe,CAACI,OAAD,CAAf;AACD,KAhBD;;AAkBAD,IAAAA,aAAa;AACd,GApBQ,EAoBN,EApBM,CAAT;;AAsBA,QAAMQ,wBAAwB,GAAG,MAAM;AACrCF,IAAAA,OAAO,CAACC,GAAR,CAAYX,WAAZ;AACD,GAFD;;AAIA,sBACE;AAAA,4BACE,QAAC,WAAD;AAAA,8BACE,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAWE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAXF,eAgBE;AAAA,gBAAMF,WAAN,aAAMA,WAAN,yCAAMA,WAAW,CAAG,CAAH,CAAjB,mDAAM,eAAkBW,SAAlB,CAA4BI,QAA5B;AAAN;AAAA;AAAA;AAAA;AAAA,YAhBF,eAiBE,QAAC,IAAD;AACE,MAAA,EAAE,EAAG,aADP;AAEE,MAAA,SAAS,EAAE,CAACf,WAAW,CAACgB,MAAb,GAAsB,UAAtB,GAAmC,IAFhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAjBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA0BD,CAxDD;;GAAMjB,e;;KAAAA,e;AA0DN,eAAeA,eAAf","sourcesContent":["import { Explanation, ExplanationText, Title } from \"../Components/Explanation\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport { PublicKey } from \"@solana/web3.js\";\n\nconst SendTransaction = ({ accountList, connection }) => {\n  const [transaction, setTransactions] = useState(false);\n  const [goToNextPage, setNextPage] = useState(false);\n\n  useEffect(() => {\n    const getNewAccount = async () => {\n      const account = await new PublicKey(\n        \"DoFxSedewimW1j8wz1LDhNUsqWs97aytqXkhFj8WBz8H\",\n      );\n\n      const newAccount = await connection.getBalance(account);\n\n      if (accountList?.[0]) {\n        const newTransaction = await connection.getBalance(\n          accountList?.[0]?.publicKey,\n        );\n      }\n\n      console.log(newAccount, newTransaction, \"connection stuff\");\n\n      setTransactions(account);\n    };\n\n    getNewAccount();\n  }, []);\n\n  const transactAndAllowNextPage = () => {\n    console.log(transaction);\n  };\n\n  return (\n    <div>\n      <Explanation>\n        <Title>Let's try sending a transaction now!</Title>\n        <ExplanationText>\n          Being able to send and receive a transaction is really important. To\n          do this, you need the reciever wallet, and the send wallet. This page\n          has two generated accounts. If you want to check the transaction, you\n          can see a list of all transactions here:\n        </ExplanationText>\n      </Explanation>\n\n      <div>\n        AS you can see there is a transaction fee associated with your\n        transaction.\n      </div>\n\n      <div>{accountList?.[0]?.publicKey.toString()}</div>\n      <Link\n        to={`/learn-rent`}\n        className={!accountList.length ? \"disabled\" : null}\n      >\n        Go Next\n      </Link>\n    </div>\n  );\n};\n\nexport default SendTransaction;\n"]},"metadata":{},"sourceType":"module"}