{"ast":null,"code":"var _jsxFileName = \"/Users/mr.mac/SolanaHackathon/solana/src/Pages/01_CreateAccount.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport createAccount from \"../utils/createAccount\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CreateAccount = () => {\n  _s();\n\n  const [accountList, setAccountList] = useState([]);\n\n  const createCoin = async () => {\n    const newAccount = await createAccount();\n    setAccountList([...accountList, newAccount]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Let's learn about accounts!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"In most cryptos, it's very easy to make hundreds of accounts.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Having a lot of accounts is useful for many reasons! For example, it's pretty normal to have an account for ... and ...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Let's try creating a few accounts ourselves\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Click the button below to create an account!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => createCoin(),\n        children: \"Create Account\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), accountList.map((account, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: account.publicKey.toString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: account.secretKey.toString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CreateAccount, \"3PaLyu67CzkDlgClDNCkTw7xJLM=\");\n\n_c = CreateAccount;\nexport default CreateAccount;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateAccount\");","map":{"version":3,"sources":["/Users/mr.mac/SolanaHackathon/solana/src/Pages/01_CreateAccount.js"],"names":["useState","createAccount","CreateAccount","accountList","setAccountList","createCoin","newAccount","map","account","index","publicKey","toString","secretKey"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,aAAP,MAA0B,wBAA1B;;;AAEA,MAAMC,aAAa,GAAG,MAAM;AAAA;;AAC1B,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCJ,QAAQ,CAAC,EAAD,CAA9C;;AAEA,QAAMK,UAAU,GAAG,YAAY;AAC7B,UAAMC,UAAU,GAAG,MAAML,aAAa,EAAtC;AACAG,IAAAA,cAAc,CAAC,CAAC,GAAGD,WAAJ,EAAiBG,UAAjB,CAAD,CAAd;AACD,GAHD;;AAKA,sBACE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANF,eAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAWE;AAAA,6BACE;AAAQ,QAAA,OAAO,EAAE,MAAMD,UAAU,EAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAXF,EAcGF,WAAW,CAACI,GAAZ,CAAgB,CAACC,OAAD,EAAUC,KAAV,kBACf;AAAA,6BACE;AAAA,gCACE;AAAA,iCACE;AAAA,sBAAMD,OAAO,CAACE,SAAR,CAAkBC,QAAlB;AAAN;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE;AAAA,oBAAMH,OAAO,CAACI,SAAR,CAAkBD,QAAlB;AAAN;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,OAASF,KAAT;AAAA;AAAA;AAAA;AAAA,YADD,CAdH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA2BD,CAnCD;;GAAMP,a;;KAAAA,a;AAqCN,eAAeA,aAAf","sourcesContent":["import { useState } from \"react\";\nimport createAccount from \"../utils/createAccount\";\n\nconst CreateAccount = () => {\n  const [accountList, setAccountList] = useState([]);\n\n  const createCoin = async () => {\n    const newAccount = await createAccount();\n    setAccountList([...accountList, newAccount]);\n  };\n\n  return (\n    <div className=\"wrapper\">\n      <h1>Let's learn about accounts!</h1>\n      <div>\n        <div>In most cryptos, it's very easy to make hundreds of accounts.</div>\n        <div>\n          Having a lot of accounts is useful for many reasons! For example, it's\n          pretty normal to have an account for ... and ...\n        </div>\n        <div>Let's try creating a few accounts ourselves</div>\n        <div>Click the button below to create an account!</div>\n      </div>\n      <div>\n        <button onClick={() => createCoin()}>Create Account</button>\n      </div>\n      {accountList.map((account, index) => (\n        <li key={index}>\n          <div>\n            <div>\n              <div>{account.publicKey.toString()}</div>\n            </div>\n            <div>{account.secretKey.toString()}</div>\n          </div>\n        </li>\n      ))}\n    </div>\n  );\n};\n\nexport default CreateAccount;\n"]},"metadata":{},"sourceType":"module"}